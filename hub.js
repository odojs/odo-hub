// Generated by CoffeeScript 1.9.2
var async, template;

async = require('odo-async');

template = require('odo-template');

module.exports = function(dispatcher) {
  var all, every, listeners, once;
  listeners = {};
  all = [];
  every = function(e, cb) {
    if (listeners[e] == null) {
      listeners[e] = [];
    }
    listeners[e].push(cb);
    return {
      off: function() {
        var index;
        index = listeners[e].indexOf(cb);
        if (index !== -1) {
          return listeners[e].splice(index, 1);
        }
      }
    };
  };
  once = function(e, cb) {
    var binding;
    binding = every(e, function(payload, callback) {
      binding.off();
      return cb(payload, callback);
    });
    return {
      off: function() {
        return binding.off();
      }
    };
  };
  return {
    every: function(events, cb) {
      var bindings, e, i, len;
      if (!(events instanceof Array)) {
        events = [events];
      }
      bindings = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = events.length; i < len; i++) {
          e = events[i];
          results.push({
            event: e
          });
        }
        return results;
      })();
      for (i = 0, len = bindings.length; i < len; i++) {
        e = bindings[i];
        e.binding = every(e.event, cb);
      }
      return {
        off: function() {
          var j, len1, results;
          results = [];
          for (j = 0, len1 = bindings.length; j < len1; j++) {
            e = bindings[j];
            results.push(e.binding.off());
          }
          return results;
        }
      };
    },
    once: function(events, cb) {
      var bindings, count, e, i, len;
      if (!(events instanceof Array)) {
        events = [events];
      }
      count = 0;
      bindings = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = events.length; i < len; i++) {
          e = events[i];
          count++;
          results.push({
            event: e,
            complete: false
          });
        }
        return results;
      })();
      for (i = 0, len = bindings.length; i < len; i++) {
        e = bindings[i];
        e.binding = once(e.event, function(m, callback) {
          count--;
          e.complete = true;
          if (count === 0) {
            return cb(m, callback);
          } else {
            return callback();
          }
        });
      }
      return {
        off: function() {
          var j, len1, results;
          results = [];
          for (j = 0, len1 = bindings.length; j < len1; j++) {
            e = bindings[j];
            results.push(e.binding.off());
          }
          return results;
        }
      };
    },
    any: function(events, cb) {
      var bindings, e, i, len, unbind;
      bindings = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = events.length; i < len; i++) {
          e = events[i];
          results.push({
            event: e
          });
        }
        return results;
      })();
      unbind = function() {
        var i, len, results;
        results = [];
        for (i = 0, len = bindings.length; i < len; i++) {
          e = bindings[i];
          results.push(e.binding.off());
        }
        return results;
      };
      for (i = 0, len = bindings.length; i < len; i++) {
        e = bindings[i];
        e.binding = once(e.event, function() {
          unbind();
          return cb();
        });
      }
      return {
        off: unbind
      };
    },
    all: function(cb) {
      all.push(cb);
      return {
        off: function() {
          var index;
          index = all.indexOf(cb);
          if (index !== -1) {
            return all.splice(index, 1);
          }
        }
      };
    },
    emit: function(e, m, ecb) {
      var description, fn, fn1, i, j, len, len1, listener, ref, tasks;
      description = "" + (template(e, m));
      tasks = [];
      fn = function(listener) {
        return tasks.push(function(pcb) {
          return dispatcher.exec(description, function(scb) {
            return listener(e, description, m, function() {
              pcb();
              return scb();
            });
          });
        });
      };
      for (i = 0, len = all.length; i < len; i++) {
        listener = all[i];
        fn(listener);
      }
      if (listeners[e] != null) {
        ref = listeners[e].slice();
        fn1 = function(listener) {
          return tasks.push(function(pcb) {
            return dispatcher.exec(description, function(scb) {
              return listener(m, function() {
                pcb();
                return scb();
              });
            });
          });
        };
        for (j = 0, len1 = ref.length; j < len1; j++) {
          listener = ref[j];
          fn1(listener);
        }
      }
      return async.parallel(tasks, function() {
        if (ecb != null) {
          return ecb();
        }
      });
    },
    ready: function(cb) {
      return dispatcher.ready(cb);
    }
  };
};
