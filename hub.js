// Generated by CoffeeScript 1.8.0
var Sequencer, async, bind, template,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Sequencer = require('odo-sequencer');

async = require('odo-async');

template = require('odo-template');

bind = function() {
  var Hub;
  Hub = (function() {
    function Hub() {
      this.ready = __bind(this.ready, this);
      this.emit = __bind(this.emit, this);
      this.any = __bind(this.any, this);
      this.once = __bind(this.once, this);
      this._once = __bind(this._once, this);
      this.every = __bind(this.every, this);
      this._every = __bind(this._every, this);
      this.listeners = {};
      this.sequencer = new Sequencer();
    }

    Hub.prototype._every = function(e, cb) {
      if (this.listeners[e] == null) {
        this.listeners[e] = [];
      }
      this.listeners[e].push(cb);
      return {
        off: (function(_this) {
          return function() {
            var index;
            index = _this.listeners[e].indexOf(cb);
            if (index !== -1) {
              return _this.listeners[e].splice(index, 1);
            }
          };
        })(this)
      };
    };

    Hub.prototype.every = function(events, cb) {
      var bindings, e, _i, _len;
      if (!(events instanceof Array)) {
        events = [events];
      }
      bindings = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          e = events[_i];
          _results.push({
            event: e
          });
        }
        return _results;
      })();
      for (_i = 0, _len = bindings.length; _i < _len; _i++) {
        e = bindings[_i];
        e.binding = this._every(e.event, cb);
      }
      return {
        off: (function(_this) {
          return function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = bindings.length; _j < _len1; _j++) {
              e = bindings[_j];
              _results.push(e.binding.off());
            }
            return _results;
          };
        })(this)
      };
    };

    Hub.prototype._once = function(e, cb) {
      var binding;
      binding = this.every(e, (function(_this) {
        return function(payload, callback) {
          binding.off();
          return cb(payload, callback);
        };
      })(this));
      return {
        off: function() {
          return binding.off();
        }
      };
    };

    Hub.prototype.once = function(events, cb) {
      var bindings, count, e, _i, _len;
      if (!(events instanceof Array)) {
        events = [events];
      }
      count = 0;
      bindings = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          e = events[_i];
          count++;
          _results.push({
            event: e,
            complete: false
          });
        }
        return _results;
      })();
      for (_i = 0, _len = bindings.length; _i < _len; _i++) {
        e = bindings[_i];
        e.binding = this._once(e.event, function(m, callback) {
          count--;
          e.complete = true;
          if (count === 0) {
            return cb(m, callback);
          } else {
            return callback();
          }
        });
      }
      return {
        off: function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = bindings.length; _j < _len1; _j++) {
            e = bindings[_j];
            _results.push(e.binding.off());
          }
          return _results;
        }
      };
    };

    Hub.prototype.any = function(events, cb) {
      var bindings, e, unbind, _i, _len;
      bindings = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          e = events[_i];
          _results.push({
            event: e
          });
        }
        return _results;
      })();
      unbind = function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = bindings.length; _i < _len; _i++) {
          e = bindings[_i];
          _results.push(e.binding.off());
        }
        return _results;
      };
      for (_i = 0, _len = bindings.length; _i < _len; _i++) {
        e = bindings[_i];
        e.binding = this._once(e.event, function() {
          unbind();
          return cb();
        });
      }
      return {
        off: unbind
      };
    };

    Hub.prototype.emit = function(e, m, ecb) {
      var description, listener, tasks, _fn, _i, _len, _ref;
      description = "" + (template(e, m));
      console.log("+ " + description);
      tasks = [];
      if (this.listeners[e] != null) {
        _ref = this.listeners[e].slice();
        _fn = (function(_this) {
          return function(listener) {
            return tasks.push(function(pcb) {
              return _this.sequencer.exec(description, function(scb) {
                return listener(m, function() {
                  pcb();
                  return scb();
                });
              });
            });
          };
        })(this);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          _fn(listener);
        }
      }
      return async.parallel(tasks, function() {
        if (ecb != null) {
          return ecb();
        }
      });
    };

    Hub.prototype.ready = function(cb) {
      return this.sequencer.ready(cb);
    };

    return Hub;

  })();
  return new Hub();
};

module.exports = bind();
