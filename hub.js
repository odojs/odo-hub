// Generated by CoffeeScript 1.9.2
var Sequencer, async, bind, template,
  bind1 = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Sequencer = require('odo-sequencer');

async = require('odo-async');

template = require('odo-template');

bind = function() {
  var Hub;
  Hub = (function() {
    function Hub() {
      this.ready = bind1(this.ready, this);
      this.emit = bind1(this.emit, this);
      this.all = bind1(this.all, this);
      this.any = bind1(this.any, this);
      this.once = bind1(this.once, this);
      this._once = bind1(this._once, this);
      this.every = bind1(this.every, this);
      this._every = bind1(this._every, this);
      this._listeners = {};
      this._all = [];
      this._seq = new Sequencer();
    }

    Hub.prototype.create = function() {
      return new Hub();
    };

    Hub.prototype._every = function(e, cb) {
      if (this._listeners[e] == null) {
        this._listeners[e] = [];
      }
      this._listeners[e].push(cb);
      return {
        off: (function(_this) {
          return function() {
            var index;
            index = _this._listeners[e].indexOf(cb);
            if (index !== -1) {
              return _this._listeners[e].splice(index, 1);
            }
          };
        })(this)
      };
    };

    Hub.prototype.every = function(events, cb) {
      var bindings, e, i, len;
      if (!(events instanceof Array)) {
        events = [events];
      }
      bindings = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = events.length; i < len; i++) {
          e = events[i];
          results.push({
            event: e
          });
        }
        return results;
      })();
      for (i = 0, len = bindings.length; i < len; i++) {
        e = bindings[i];
        e.binding = this._every(e.event, cb);
      }
      return {
        off: (function(_this) {
          return function() {
            var j, len1, results;
            results = [];
            for (j = 0, len1 = bindings.length; j < len1; j++) {
              e = bindings[j];
              results.push(e.binding.off());
            }
            return results;
          };
        })(this)
      };
    };

    Hub.prototype._once = function(e, cb) {
      var binding;
      binding = this.every(e, (function(_this) {
        return function(payload, callback) {
          binding.off();
          return cb(payload, callback);
        };
      })(this));
      return {
        off: function() {
          return binding.off();
        }
      };
    };

    Hub.prototype.once = function(events, cb) {
      var bindings, count, e, i, len;
      if (!(events instanceof Array)) {
        events = [events];
      }
      count = 0;
      bindings = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = events.length; i < len; i++) {
          e = events[i];
          count++;
          results.push({
            event: e,
            complete: false
          });
        }
        return results;
      })();
      for (i = 0, len = bindings.length; i < len; i++) {
        e = bindings[i];
        e.binding = this._once(e.event, function(m, callback) {
          count--;
          e.complete = true;
          if (count === 0) {
            return cb(m, callback);
          } else {
            return callback();
          }
        });
      }
      return {
        off: function() {
          var j, len1, results;
          results = [];
          for (j = 0, len1 = bindings.length; j < len1; j++) {
            e = bindings[j];
            results.push(e.binding.off());
          }
          return results;
        }
      };
    };

    Hub.prototype.any = function(events, cb) {
      var bindings, e, i, len, unbind;
      bindings = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = events.length; i < len; i++) {
          e = events[i];
          results.push({
            event: e
          });
        }
        return results;
      })();
      unbind = function() {
        var i, len, results;
        results = [];
        for (i = 0, len = bindings.length; i < len; i++) {
          e = bindings[i];
          results.push(e.binding.off());
        }
        return results;
      };
      for (i = 0, len = bindings.length; i < len; i++) {
        e = bindings[i];
        e.binding = this._once(e.event, function() {
          unbind();
          return cb();
        });
      }
      return {
        off: unbind
      };
    };

    Hub.prototype.all = function(cb) {
      this._all.push(cb);
      return {
        off: function() {
          var index;
          index = this._all.indexOf(cb);
          if (index !== -1) {
            return this._all.splice(index, 1);
          }
        }
      };
    };

    Hub.prototype.emit = function(e, m, ecb) {
      var description, fn, fn1, i, j, len, len1, listener, ref, ref1, tasks;
      description = "" + (template(e, m));
      tasks = [];
      ref = this._all;
      fn = (function(_this) {
        return function(listener) {
          return tasks.push(function(pcb) {
            return _this._seq.exec(description, function(scb) {
              return listener(e, description, m, function() {
                pcb();
                return scb();
              });
            });
          });
        };
      })(this);
      for (i = 0, len = ref.length; i < len; i++) {
        listener = ref[i];
        fn(listener);
      }
      if (this._listeners[e] != null) {
        ref1 = this._listeners[e].slice();
        fn1 = (function(_this) {
          return function(listener) {
            return tasks.push(function(pcb) {
              return _this._seq.exec(description, function(scb) {
                return listener(m, function() {
                  pcb();
                  return scb();
                });
              });
            });
          };
        })(this);
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          listener = ref1[j];
          fn1(listener);
        }
      }
      return async.parallel(tasks, function() {
        if (ecb != null) {
          return ecb();
        }
      });
    };

    Hub.prototype.ready = function(cb) {
      return this._seq.ready(cb);
    };

    return Hub;

  })();
  return new Hub();
};

module.exports = bind();
